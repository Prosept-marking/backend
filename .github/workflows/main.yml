name: Prosept workflows

on:
  push:
    branches:
      - develop

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: prosept_user
          POSTGRES_PASSWORD: prosept_password
          POSTGRES_DB: prosept_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user pre-commit
        pre-commit install
    - name: Test with flake8 and django tests
      run: |
        pre-commit run --files backend/*

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/prosept_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/prosept_nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Create project directory and .env-file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo rm -r ${{ secrets.PROJECT_NAME }}
          sudo mkdir -p ${{ secrets.PROJECT_NAME }}
          sudo chmod 777 ${{ secrets.PROJECT_NAME }}
          sudo cat > ${{ secrets.PROJECT_NAME }}/.env << _EOF_
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DB_HOST=${{ secrets.POSTGRES_HOST }}
            DB_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
            DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
            DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
            PROJECT_NAME=${{ secrets.PROJECT_NAME }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          _EOF_
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yml"
        target: "prosept"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd prosept
          sudo docker compose -f docker-compose.yml down
          sudo docker compose -f docker-compose.yml up -d
          sudo docker compose -f docker-compose.yml exec backend pipenv run python manage.py migrate
          sudo docker compose -f docker-compose.yml exec backend pipenv run python manage.py collectstatic
          sudo docker compose -f docker-compose.yml exec backend cp -r /app/backend/collected_static/. /backend_static/static/
